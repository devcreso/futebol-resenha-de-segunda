generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  surname     String
  phone       String
  email       String   @unique
  password    String
  position    Position
  status      Status   @default(MENSALISTA)
  isAdmin     Boolean  @default(false)
  approved    Boolean  @default(false)

  confirmations  Confirmation[]
  participations Participation[]
  payments       Payment[]
  eventsParticipations EventAttendee[]
}

model Confirmation {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  isPresent  Boolean
  createdAt  DateTime @default(now())
}

model Participation {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  matchDate   DateTime
  team        Team
  isWinner    Boolean
  goals       Int      @default(0)
  pointsExtra Int      @default(0)
}

model Payment {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  type       PaymentType
  amount     Float
  dueDate    DateTime
  paid       Boolean  @default(false)
  paidAt     DateTime?
  reference  String?  // Ex: “Mensalidade Maio/2025”
}

model Match {
  id        String   @id @default(uuid())
  date      DateTime
  teamBlack String[]
  teamOrange String[]
  scoreBlack Int?
  scoreOrange Int?
  photoUrl   String?
}

model Event {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  price     Float
  attendees EventAttendee[]
}

model EventAttendee {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  paid      Boolean  @default(false)
  paidAt    DateTime?
}

model CashFlow {
  id        String   @id @default(uuid())
  date      DateTime
  type      CashFlowType
  amount    Float
  description String
  balanceAfter Float
}

enum Position {
  GOLEIRO
  ZAGUEIRO
  MEIA
  ATACANTE
}

enum Status {
  MENSALISTA
  SUPLENTE
}

enum Team {
  PRETO
  LARANJA
}

enum PaymentType {
  MENSALIDADE
  JOGO_AVULSO
  EVENTO
}

enum CashFlowType {
  ENTRADA
  SAIDA
}
